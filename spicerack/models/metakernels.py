# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from spicerack.models.base_model_ import Model
from spicerack.models.metakernel import Metakernel  # noqa: F401,E501
from spicerack import util


class Metakernels(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, kernels: List[Metakernel]=None):  # noqa: E501
        """Metakernels - a model defined in Swagger

        :param count: The count of this Metakernels.  # noqa: E501
        :type count: int
        :param kernels: The kernels of this Metakernels.  # noqa: E501
        :type kernels: List[Metakernel]
        """
        self.swagger_types = {
            'count': int,
            'kernels': List[Metakernel]
        }

        self.attribute_map = {
            'count': 'count',
            'kernels': 'kernels'
        }

        self._count = count
        self._kernels = kernels

    @classmethod
    def from_dict(cls, dikt) -> 'Metakernels':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The metakernels of this Metakernels.  # noqa: E501
        :rtype: Metakernels
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self) -> int:
        """Gets the count of this Metakernels.

        Number of metakernels returned  # noqa: E501

        :return: The count of this Metakernels.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this Metakernels.

        Number of metakernels returned  # noqa: E501

        :param count: The count of this Metakernels.
        :type count: int
        """

        self._count = count

    @property
    def kernels(self) -> List[Metakernel]:
        """Gets the kernels of this Metakernels.


        :return: The kernels of this Metakernels.
        :rtype: List[Metakernel]
        """
        return self._kernels

    @kernels.setter
    def kernels(self, kernels: List[Metakernel]):
        """Sets the kernels of this Metakernels.


        :param kernels: The kernels of this Metakernels.
        :type kernels: List[Metakernel]
        """

        self._kernels = kernels
